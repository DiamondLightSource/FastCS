# yaml-language-server: $schema=values.schema.json

# Default values for fastcs-instance chart.
#
# helm-schema annotations describe the schema for values files.
# see https://github.com/dadav/helm-schema
# Generate the values schema with `generate-schema.sh`
#
# This file itself adheres to the schema it describes (to help writing the annotations).

# @schema
# title: image
# type: object
# @schema
image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: ""

# @schema
# description: Command to run in the container (as array of arguments)
# type: array
# items:
#   type: string
# required: false
# @schema
command: []

# @schema
# description: arguments to pass to the above command
# type: array
# items:
#   type: string
# required: false
# @schema
args: []

# @schema
# description: Command to run in the debug version of the container
# type: array
# items:
#   type: string
# required: false
# @schema
debugCommand:
  - /bin/bash
  - -c
  - "sleep infinity"

# @schema
# description: |
#   Command to run in the init container.
#   Defaults to copying workspace and venv.
# type: array
# items:
#   type: string
# required: false
# @schema
initCommand:
  - /bin/bash
  - -c
  - |
    echo "running as account"; id
    if [ -d /dest/venv ]; then
      echo "Virtual environment already exists, skipping copy"
    else
      echo "Copying virtual env to the debugging volume"
      cp -r /venv /dest/venv
      echo "Copying workspaces to the debugging volume"
      cp -r /workspaces /dest/workspaces
      echo "Setting permissions on the debugging volume"
      chmod -R o+rwX /dest/venv /dest/workspaces
    fi
    echo "Init container completed successfully"

# @schema
# description: |
#   If true, the container will run in debug mode meaning:-
#     - the entrypoint is sleep
#     - a PVC is created and mounted over /venv with /venv copied into it
#     - adds '-debug' suffix to the image name
# type: boolean
# @schema
developerMode: false

# @schema
# description: location of config folder (defaults to be the same as C++ IOCs)
# type: string
# required: false
# @schema
iocConfig: /epics/ioc/config

# @schema
# description: service port for Channel Access
# type: integer
# required: false
# @schema
ca_server_port: 5064
# @schema
# description: service port for PV Access
# type: integer
# required: false
# @schema
pva_server_port: 5075

# @schema
# title: CIDR for services addresses.
# description: |
#   Used by allocateIpFromName to allocate a fixed cluster IP for the service.
#   The default is the same for all DLS clusters.
# type: string
# pattern: ^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$
# required: false
# @schema
baseIp: 10.96.0.0/12
# @schema
# title: Override for the cluster IP - only needed if allocateIpFromName clashes
# type: [string, null]
# format: ipv4
# required: false
# @schema
clusterIP:

# @schema
# description: |
#   The service will be configured for Channel Access and PVA. Here you can override
#   the ports and also make this a LoadBalancer service if required.
# type: object
# required: false
# @schema
service:
  type: ClusterIP
  ca_port: 5064
  pva_port: 5075

# @schema
# description: adds addtional containers specified by image and command
# type: array
# items:
#   type: object
#   properties:
#     name:
#       type: string
#       description: A name for the additional container
#     image:
#       type: string
#       format: image
#       description: Container image URI
#     command:
#       type: array
#       description: Command to run in the container (as array of arguments)
#   required: [name, image, command]
#   additionalProperties: false
# @schema
extra_containers: []

# @schema
# title: Pod Annotations
# type: object
# @schema
podAnnotations: {}
# @schema
# title: Pod Labels
# type: object
# @schema
podLabels: {}

# @schema
# title: Pod Security Context
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext
# @schema
podSecurityContext: {}

# @schema
# title: Container Security Context
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext
# @schema
securityContext: {}

# @schema
# title: Resource limits and requests
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements
# @schema
resources: {}

# @schema
# title: livenessProbe
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Probe
# @schema
livenessProbe: {}
# @schema
# title: readinessProbe
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Probe
# @schema
readinessProbe: {}

# @schema
# title: volumes
# description: Additional volumes to mount in the output Deployment definition.
# type: array
# items:
#   type: object
#   $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Volume
# @schema
volumes: []

# @schema
# title: volumeMounts
# type: array
# items:
#   type: object
#   $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount
# @schema
volumeMounts: []

# TODO - I had problems with schema checking at helm chart ArgoCD deploy time
# TODO - it seemed that {} for nodeSelector was illegal, so I added null as an option
# TODO - I'm not sure why this was needed but not for other object fields with k8s schemas
# @schema
# title: nodeSelector
# description: Node selector for the pod
# type: [object, null]
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.NodeSelector
# @schema
nodeSelector:

# @schema
# title: tolerations
# description: Tolerations for the pod
# type: array
# items:
#   type: object
#   $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Toleration
# @schema
tolerations: []

# @schema
# title: affinity
# description: Affinity for the pod
# type: object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Affinity
# @schema
affinity: {}
