# yaml-language-server: $schema=values.schema.json

# Default values for fastcs-instance chart.
# With annotations for building the schema using:
#   https://github.com/losisin/helm-values-schema-json.git

# @schema description: container image URI
image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: ""

# @schema description: command to run for the production container
command: []

# @schema description: command args to pass to the production container
args: []

# @schema description: command to run for the debugging (non- autostart) container
debugCommand:
  - /bin/bash
  - -c
  - "sleep infinity"

# @schema description: command to run in the init container for editable mode
initCommand:
  - /bin/bash
  - -c
  - |
    echo "running as account"; id
    if [ -d /dest/venv ]; then
      echo "Virtual environment already exists, skipping copy"
    else
      echo "Copying virtual env to the debugging volume"
      cp -r /venv /dest/venv
      echo "Copying workspaces to the debugging volume"
      cp -r /workspaces /dest/workspaces
      echo "Setting permissions on the debugging volume"
      chmod -R o+rwX /dest/venv /dest/workspaces
    fi
    echo "Init container completed successfully"

# @schema description: enable host networking for the pod
hostNetwork: true

# @schema description: editable and autostart are used for debugging and development in-cluster
#     editable:
#       creates a PVC with /venv and /workspaces mounted into the container
#       runs an init container with entrypoint initCommand above
editable: false
# @schema description: editable and autostart are used for debugging and development in-cluster
#   autostart:
#     false: entrypoint is debugCommand above
#     true: entrypoint is command above
autostart: true

# @schema description: path to the location of config folder (defaults to be the same as C++ IOCs)
iocConfig: /epics/ioc/config

# @schema description: service port for Channel Access
ca_server_port: 5064
# @schema description: service port for PV Access
pva_server_port: 5075

# @schema description: CIDR for services addresses.
#   Used by allocateIpFromName to allocate a fixed cluster IP for the service.
#   The default is the same for all DLS clusters.
baseIp: 10.96.0.0/12 # @schema pattern:^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$

# @schema description: Override for the cluster IP - only needed if allocateIpFromName clashes
clusterIP: # @schema pattern:^(\d{1,3}\.){3}\d{1,3}$

# @schema description: The service will be configured for Channel Access and PVA.
#   Here you can override the ports or make this a LoadBalancer service if required.
service:
  type: ClusterIP
  ca_port: 5064
  pva_port: 5075

# @schema
# TODO: how do we represent this using
#   https://github.com/losisin/helm-values-schema-json.git
# description: adds addtional containers specified by image and command
# type: array
# items:
#   type: object
#   properties:
#     name:
#       type: string
#       description: A name for the additional container
#     image:
#       type: string
#       format: image
#       description: Container image URI
#     command:
#       type: array
#       description: Command to run in the container (as array of arguments)
#   required: [name, image, command]
#   additionalProperties: false
# @schema
extraContainers: []

# @schema description: Add annotations to the pod
podAnnotations: {}

# @schema description: Add labels to the pod
podLabels: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext
podSecurityContext: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.SecurityContext
securityContext: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements
resources: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Probe
livenessProbe: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Probe
readinessProbe: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Volume
volumes: []

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.VolumeMount
volumeMounts: []

# TODO I cant find a way to allow null for nodeSelector but also pass the ref for the object
# $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.NodeSelector
# @schema type:[object, null]
nodeSelector: {}

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Toleration
tolerations: []

# @schema $ref: https://kubernetesjsonschema.dev/v1.18.1/_definitions.json#/definitions/io.k8s.api.core.v1.Affinity
affinity: {}
